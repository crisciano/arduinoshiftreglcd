#summary Usage of the functions or methods.
= Usage =

This list of functions (or methods) of the library can basically be obtained by looking at the ShiftRegLCD.cpp.

The examples is for the object named srlcd, created with

`ShiftRegLCD srlcd(Data, Cloc, Enable or the constant TWO_WIRE);`

Of course you can name the object what you want.



== Initialization ==

{{{
#include <ShiftRegLCD.h>
ShiftRegLCD objectName(Datapin, Clockpin, Enablepin or TWO_WIRE [, Lines [, Font]])
}}}
  where Lines and Font are optional.
 * Enablepin: can be replaced by constant TWO_WIRE, if using only 2 wires.
 * Lines: 1 or 2 lines (or more if possible)
 * Font : 0 or 1, small or big font (8 or 10 pixel tall font, if available).


=== Examples ===

Using two wires, 1-line display. Data is on pin 12, clock on pin 13. Enable will also be on the Data output:

{{{
#include <ShiftRegLCD.h>
ShiftRegLCD srlcd(12, 13, TWO_WIRE);
}}}


Using two wires, 1-line display with a big (10 pixel high) font (which according to specs can only be on a 1-line display):

{{{
#include <ShiftRegLCD.h>
ShiftRegLCD srlcd(12, 13, TWO_WIRE, 1,1 );
}}}


Or, if using three wires, and a 2-line display. Enable will be on pin 8:

{{{
#include <ShiftRegLCD.h>
ShiftRegLCD srlcd(12, 13, 8, 2);
}}}



= Functions =

==  Clear display ==
{{{
srlcd.clear(); // Clear display, set cursor position to zero
}}}


== Cursor positioning ==
{{{
srlcd.home();  // Set cursor position to zero
}}}
{{{
srlcd.setCursor(column, row); // Sets cursor position
}}}
Remember row begins at row 0 (zero), for the first line.
Also column begins at column 0.

== Turn the display on/off ==
{{{
srlcd.noDisplay(); // Turn the display off
}}}
{{{
srlcd.display();   // Turn the display on
}}}


== Turns the underline cursor on/off ==
{{{
srlcd.noCursor(); //Turns the underline cursor off
}}}
{{{
srlcd.cursor();   // Turns the underline cursor on
}}}


== Turn the blinking cursor on/off  ==
{{{
srlcd.noBlink();
}}}
{{{
srlcd.blink();
}}}


== These commands scroll the display without changing the display RAM ==
{{{
srlcd.scrollDisplayLeft(void);
}}}
{{{
srlcd.scrollDisplayRight(void);
}}}


== Text flow direction ==
{{{
srlcd.shiftLeft(void);  //  This is for text that flows Left to Right
}}}
{{{
srlcd.shiftRight(void); // This is for text that flows Right to Left
}}}


== Text justification ==
{{{
srlcd.shiftIncrement(void); // This will 'right justify' text from the cursor
}}}
{{{
srlcd.shiftDecrement(void); // This will 'left justify' text from the cursor
}}}



== Custom character generation ==
There can be up to 8 custom generated characters.
{{{
srlcd.createChar(uint8_t location, uint8_t charmap[])
}}}
Where location is a number from 0 to 7. charmap[] is an 8 element byte array of a character pattern. Beware the characters are only 5 pixels wide, so the 3 upper bits must always be zero.

For example, to make a bell character at character position 3:

{{{
uint8_t bell[8]  = { 00000100B,
                     00001110B,
                     00001110B,
                     00001110B,
                     00011111B,
                     00000000B,
                     00000100B};

srlcd.createChar(3, bell);
}}}