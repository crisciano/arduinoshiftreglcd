#Background information for the ShiftRegLCD library

= Introduction =

This is a library for using an Arduino (or compatible microcontrollersystem) with an LCD with 3 wires via one shiftregister. Or more.



= Mundane details =

This is basically the same as the [http://arduino.cc/en/Reference/LiquidCrystal/ LiquidCrystal library] (exact same functionality and usage from a coding perspective), which it is pretty much based on (almost verbatim) It's just tweaked to work with a shift register. I used 74LS164, since that's what I had. That's not a fancy shiftregister (no tristate nor latching etc.), so I kept the Enable-pin on the Arduino. Thus using three pins from the Arduino. Basically any shiftregister should do.


I'm pretty new to the Arduino, but I have dabbled a little in both electronics and C++ before. But not much, this is the first class or library I've written for C++. Or very C++ like language. 

Since I had an old HD44780 LCD display, I wanted to connect it to the Arduino. Like most of us it seems, so this might be a bit like reinventing the wheel for the n'th time. But I hope this might be useful for some anyway (Plus, I learned a bit about classes and libraries in C++)


== Additional, somewhat technical mundane details ==

It's a bit crude, as there is no reading of the busy flag from the LCD. I am however playing with the idea of implementing that while still using the same three connections from the Arduino. That will require some more external circuitry however, and I'm not sure when I will start tinkering with that, so for now I thought I'd share this one.

It does seem a bit quirky as to how or when it starts. It usually starts well after uploading a sketch, but by pressing the reset-button on the Arduino, it seems to be neccessary to hold the reset-button down for about a second or so.

It seems some have 4-line LCD-displays with (I think) common data pins (D0 - D7), and two enable-pins. There should be no problem making two instances of ShiftRegLCD objects with the same data and clock-pins, but with different enable pins, thus using 4 pins on the Arduino.


As I had to use one bit for the RS signal, and didn't have any 9-bit shiftregisters handy, I use the LCD's in 4-bit mode. Seems fast enough for most purposes, but wastes 3 outputs on the shiftregister (for now). RW on the LCD is grounded, only writing-to is supported in this.

= Schematics =

If anyone wants to know, this is how I connected my LCD. (I know I should probably used a potmeter for the contrast setting, V5 on the LCD. But it works). Of course it doesn't matter which pins from the Arduino one use. I used pins 8, 12 and 13 here, like in the example sketch. Also, the one I have tested this with, is a Bare Bones Board with Atmega328 at 16 MHz. But I think it should work with an atmega168 at the same speed or slower without any modifications.

Sorry for my lack of electronics CAD, so this drawing have to do for now.

http://i557.photobucket.com/albums/ss11/rar0n/Electronics/Arduino/ShiftRegLCD-2.jpg
(I know I mixed block schematics with pinout for the 74xx164)